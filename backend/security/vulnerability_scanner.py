"""Vulnerability Scanner Module."""

from typing import Dict, List, Optional, Any, Union
from .xss_scanner import XSSScanner
from .dns_analyzer import DNSAnalyzer
from .api_key_detector import APIKeyDetector
import requests
from urllib.parse import urlparse
import socket
import ssl
import json
from datetime import datetime

class VulnerabilityScanner:
    """Main vulnerability scanner that coordinates different security scans."""
    
    def __init__(self, target: str):
        """Initialize with a target URL or domain."""
        self.target = target
        self.results = {
            'target': target,
            'timestamp': datetime.utcnow().isoformat(),
            'scan_results': {}
        }
    
    def run_scan(self, scan_types: List[str] = None) -> Dict[str, Any]:
        """
        Run specified security scans on the target.
        
        Args:
            scan_types: List of scan types to run. If None, runs all available scans.
                       Possible values: 'xss', 'dns', 'api_keys', 'ssl', 'headers'
        """
        if scan_types is None:
            scan_types = ['xss', 'dns', 'api_keys', 'ssl', 'headers']
        
        try:
            # Parse the URL to get domain
            parsed_url = urlparse(self.target)
            domain = parsed_url.netloc or self.target
            
            # Remove port if present
            if ':' in domain:
                domain = domain.split(':')[0]
            
            # Run requested scans
            if 'xss' in scan_types and parsed_url.scheme in ('http', 'https'):
                self.scan_xss()
                
            if 'dns' in scan_types:
                self.scan_dns(domain)
                
            if 'api_keys' in scan_types:
                self.scan_for_api_keys()
                
            if 'ssl' in scan_types and parsed_url.scheme == 'https':
                self.check_ssl(domain)
                
            if 'headers' in scan_types and parsed_url.scheme in ('http', 'https'):
                self.check_security_headers()
                
        except Exception as e:
            self.results['error'] = f"Scan failed: {str(e)}"
        
        return self.results
    
    def scan_xss(self) -> None:
        """Scan for XSS vulnerabilities."""
        try:
            scanner = XSSScanner(self.target)
            result = scanner.scan()
            self.results['scan_results']['xss'] = result
        except Exception as e:
            self.results['scan_results']['xss'] = {
                'error': f"XSS scan failed: {str(e)}"
            }
    
    def scan_dns(self, domain: str) -> None:
        """Perform DNS analysis."""
        try:
            analyzer = DNSAnalyzer(domain)
            result = analyzer.analyze()
            self.results['scan_results']['dns'] = result
        except Exception as e:
            self.results['scan_results']['dns'] = {
                'error': f"DNS analysis failed: {str(e)}"
            }
    
    def scan_for_api_keys(self) -> None:
        """Scan for exposed API keys in the response."""
        try:
            # First, check the page content
            response = requests.get(self.target, timeout=10)
            detector = APIKeyDetector()
            
            # Check page content
            content_scan = detector.scan_text(response.text)
            
            # Check response headers
            headers_scan = detector.scan_text(str(response.headers))
            
            self.results['scan_results']['api_keys'] = {
                'in_content': content_scan,
                'in_headers': headers_scan,
                'total_found': len(content_scan) + len(headers_scan)
            }
        except Exception as e:
            self.results['scan_results']['api_keys'] = {
                'error': f"API key scan failed: {str(e)}"
            }
    
    def check_ssl(self, domain: str) -> None:
        """Check SSL/TLS configuration."""
        try:
            context = ssl.create_default_context()
            with socket.create_connection((domain, 443)) as sock:
                with context.wrap_socket(sock, server_hostname=domain) as ssock:
                    cert = ssock.getpeercert()
                    
                    # Get certificate expiration
                    expiry_date = None
                    for extension in cert.get('extensions', []):
                        if extension[0].get('shortname') == 'subjectAltName':
                            pass  # Can be expanded to check SANs
                    
                    # Get certificate details
                    ssl_info = {
                        'version': ssock.version(),
                        'cipher': ssock.cipher(),
                        'issuer': dict(x[0] for x in cert['issuer']),
                        'subject': dict(x[0] for x in cert['subject']),
                        'not_before': cert['notBefore'],
                        'not_after': cert['notAfter'],
                        'serial_number': cert.get('serialNumber'),
                        'has_expired': ssl.cert_time_to_seconds(cert['notAfter']) < ssl.cert_time_to_seconds(ssl.cert_time_bytes())
                    }
                    
                    self.results['scan_results']['ssl'] = ssl_info
        except Exception as e:
            self.results['scan_results']['ssl'] = {
                'error': f"SSL check failed: {str(e)}"
            }
    
    def check_security_headers(self) -> None:
        """Check for important security headers."""
        try:
            response = requests.head(self.target, timeout=10, allow_redirects=True)
            
            security_headers = [
                'Content-Security-Policy',
                'X-Content-Type-Options',
                'X-Frame-Options',
                'X-XSS-Protection',
                'Strict-Transport-Security',
                'Referrer-Policy',
                'Feature-Policy',
                'Permissions-Policy'
            ]
            
            headers_found = {}
            for header in security_headers:
                if header in response.headers:
                    headers_found[header] = response.headers[header]
            
            self.results['scan_results']['security_headers'] = {
                'present': headers_found,
                'missing': [h for h in security_headers if h not in headers_found],
                'recommendations': {
                    'Content-Security-Policy': 'Implement a strong CSP to prevent XSS attacks',
                    'X-Content-Type-Options': 'Set to "nosniff" to prevent MIME type sniffing',
                    'X-Frame-Options': 'Set to "DENY" or "SAMEORIGIN" to prevent clickjacking',
                    'Strict-Transport-Security': 'Enable HSTS with a long max-age',
                    'Referrer-Policy': 'Set a strict referrer policy to prevent information leakage',
                    'Permissions-Policy': 'Restrict browser features to prevent abuse'
                }
            }
            
        except Exception as e:
            self.results['scan_results']['security_headers'] = {
                'error': f"Failed to check security headers: {str(e)}"
            }

# Example usage
if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description='Run vulnerability scans on a target URL or domain')
    parser.add_argument('target', help='URL or domain to scan')
    parser.add_argument('--scans', nargs='+', 
                       choices=['xss', 'dns', 'api_keys', 'ssl', 'headers', 'all'],
                       default=['all'],
                       help='Types of scans to run')
    
    args = parser.parse_args()
    
    # Handle 'all' scan type
    if 'all' in args.scans:
        scan_types = ['xss', 'dns', 'api_keys', 'ssl', 'headers']
    else:
        scan_types = args.scans
    
    print(f"Starting vulnerability scan for {args.target}...\n")
    
    scanner = VulnerabilityScanner(args.target)
    results = scanner.run_scan(scan_types)
    
    print("\nScan Results:")
    print("=" * 50)
    
    for scan_type, result in results.get('scan_results', {}).items():
        print(f"\n{scan_type.upper()} Scan:")
        print("-" * 30)
        
        if 'error' in result:
            print(f"Error: {result['error']}")
            continue
            
        if scan_type == 'xss':
            if result.get('vulnerable'):
                print("⚠️  XSS Vulnerabilities Found!")
                for param in result.get('vulnerable_parameters', []):
                    print(f"- Parameter '{param}' is vulnerable to XSS")
            else:
                print("✅ No XSS vulnerabilities detected")
                
        elif scan_type == 'dns':
            print(f"Domain: {result.get('domain')}")
            
            # Print DNS records
            print("\nDNS Records:")
            for rtype, records in result.get('dns_records', {}).items():
                print(f"  {rtype}:")
                for record in records:
                    print(f"    - {record}")
            
            # Print security findings
            print("\nSecurity Findings:")
            for check, data in result.get('security', {}).items():
                status = "✅" if data.get('exists', data.get('enabled', False)) else "⚠️ "
                print(f"{status} {check.upper()}:")
                if 'recommendation' in data and data['recommendation']:
                    print(f"  - {data['recommendation']}")
        
        elif scan_type == 'api_keys':
            total = result.get('total_found', 0)
            if total > 0:
                print(f"⚠️  Found {total} potential API keys or secrets")
                if result.get('in_content'):
                    print("  In page content:")
                    for secret in result['in_content']:
                        print(f"    - {secret['type']} on line {secret['line']}")
                if result.get('in_headers'):
                    print("  In response headers:")
                    for secret in result['in_headers']:
                        print(f"    - {secret['type']}")
            else:
                print("✅ No API keys or secrets detected")
        
        elif scan_type == 'ssl':
            if result.get('has_expired'):
                print("❌ SSL Certificate has expired!")
            else:
                print("✅ SSL Certificate is valid")
            
            print(f"\nCertificate Details:")
            print(f"  Issuer: {result.get('issuer', {}).get('organizationName', 'Unknown')}")
            print(f"  Valid from: {result.get('not_before')}")
            print(f"  Valid until: {result.get('not_after')}")
            print(f"  Cipher: {result.get('cipher')[0]} {result.get('cipher')[1]}")
        
        elif scan_type == 'security_headers':
            missing = result.get('missing', [])
            if missing:
                print("⚠️  Missing recommended security headers:")
                for header in missing:
                    print(f"  - {header}: {result['recommendations'].get(header, 'Recommended')}")
            else:
                print("✅ All recommended security headers are present")
            
            if result.get('present'):
                print("\nCurrent Security Headers:")
                for header, value in result['present'].items():
                    print(f"  {header}: {value}")
